[gcode_macro _fSense_vars] 
variable_detection_length: 10
gcode:

[mcu fSense]
canbus_uuid: "your_uuid"

[temperature_sensor fSense_temp]
sensor_type: temperature_mcu
sensor_mcu: fSense
min_temp: 1
max_temp: 75

[gcode_macro SET_EXTRUDER_SENSOR]
description: Enable or disable filament sensor(s) for specific extruder(s).
  Parameters:
    TOOL: Extruder number (e.g., 0, 1, etc.) or -1 for all configured tools (default 0).
    ENABLE: Sensor state (0=disable, 1=enable, default 1).
  Examples:
    SET_EXTRUDER_SENSOR TOOL=0 ENABLE=1   ; Enable RunOutExtruder0
    SET_EXTRUDER_SENSOR TOOL=2 ENABLE=0   ; Disable RunOutExtruder2
    SET_EXTRUDER_SENSOR TOOL=-1 ENABLE=0  ; Disable all configured sensors
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    {% set enable = params.ENABLE|default(1)|int %}

    # Validate ENABLE
    {% if enable not in [0, 1] %}
        { action_raise_error("Invalid ENABLE value. Must be 0 or 1.") }
    {% endif %}

    # Check if toolchanger is configured
    {% if printer.toolchanger is not defined %}
        { action_raise_error("Toolchanger not configured. Cannot retrieve tool numbers.") }
    {% endif %}

    # Get configured tool numbers
    {% set tools = printer.toolchanger.tool_numbers %}
    {% if tools|length == 0 %}
        { action_raise_error("No tools configured in toolchanger.") }
    {% endif %}

    # Handle all tools (TOOL=-1)
    {% if tool == -1 %}
        {% for t in tools %}
            {% set fiSense = "RunOutExtruder" ~ t %}
            {% if printer["filament_motion_sensor " ~ fiSense] is defined %}
                SET_FILAMENT_SENSOR SENSOR={fiSense} ENABLE={enable}
                RESPOND TYPE=echo MSG="Filament sensor {fiSense} {'enabled' if enable else 'disabled'}"
            {% else %}
                RESPOND TYPE=error MSG="Filament sensor {fiSense} not found"
            {% endif %}
        {% endfor %}
    {% else %}
        # Validate TOOL
        {% if tool not in tools %}
            { action_raise_error("Invalid TOOL value. Must be one of: " ~ tools|join(", ")) }
        {% endif %}

        # Toggle single sensor
        {% set fiSense = "RunOutExtruder" ~ tool %}
        {% if printer["filament_motion_sensor " ~ fiSense] is defined %}
            SET_FILAMENT_SENSOR SENSOR={fiSense} ENABLE={enable}
            RESPOND TYPE=echo MSG="Filament sensor {fiSense} {'enabled' if enable else 'disabled'}"
        {% else %}
            { action_raise_error("Filament sensor {fiSense} not found") }
        {% endif %}
    {% endif %}

[gcode_macro SELECT_TOOL]
rename_existing: _SELECT_TOOL
gcode:    
    {% set tool = params.T %}
    SET_EXTRUDER_SENSOR TOOL=-1 ENABLE=0
    SET_EXTRUDER_SENSOR TOOL={tool} ENABLE=1
    _SELECT_TOOL T={tool}

[filament_motion_sensor RunOutExtruder0]
detection_length: {printer["gcode_macro _fSense_vars"].detection_length}   
extruder: extruder
switch_pin: fSense:gpio21 
pause_on_runout: false
runout_gcode:
    RESPOND TYPE=error MSG="Filament runout detected on Extruder0"              
    PAUSE

[filament_motion_sensor RunOutExtruder1]
detection_length: {printer["gcode_macro _fSense_vars"].detection_length}   
extruder: extruder1
switch_pin: fSense:gpio20 
pause_on_runout: false
runout_gcode:
    RESPOND TYPE=error MSG="Filament runout detected on Extruder1"               
    PAUSE

[filament_motion_sensor RunOutExtruder2]
detection_length: {printer["gcode_macro _fSense_vars"].detection_length}   
extruder: extruder2
switch_pin: fSense:gpio19 
pause_on_runout: false
runout_gcode:
    RESPOND TYPE=error MSG="Filament runout detected on Extruder2"            
    PAUSE

[filament_motion_sensor RunOutExtruder3]
detection_length: {printer["gcode_macro _fSense_vars"].detection_length}   
extruder: extruder3
switch_pin: fSense:gpio18 
pause_on_runout: false
runout_gcode:
    RESPOND TYPE=error MSG="Filament runout detected on Extruder3"             
    PAUSE

[filament_motion_sensor RunOutExtruder4]
detection_length: {printer["gcode_macro _fSense_vars"].detection_length}   
extruder: extruder4
switch_pin: fSense:gpio17 
pause_on_runout: false
runout_gcode: 
    RESPOND TYPE=error MSG="Filament runout detected on Extruder4"               
    PAUSE

[filament_motion_sensor RunOutExtruder5]
detection_length: {printer["gcode_macro _fSense_vars"].detection_length}
extruder: extruder5
switch_pin: fSense:gpio16 
pause_on_runout: false
runout_gcode: 
    RESPOND TYPE=error MSG="Filament runout detected on Extruder5"               
    PAUSE